#!/bin/bash
###################################
###### My bash functions, sourced by .bashrc ######
###################################
## Ver 160 ##

### clr_mem ###

clr_mem () {
	#pagecache, dentries and inodes
	#	1		2		3
    echo $1 > /proc/sys/vm/drop_caches
}

### cowerd ###

cowerd() {
	if [[ "$1" == "-m" ]]; then
		targ="$2"
		cower -f -d -t /projects/builds/ "$targ" 
		cd /projects/builds/"$targ"
		makepkg
	elif [[ "$1" == "-i" ]]; then
		targ="$2"
		cower -f -d -t /projects/builds/ "$targ" 
		cd /projects/builds/"$targ"
		makepkg -i --noconfirm
	else
		targ="$1"
		cower -f -d -t /projects/builds/ "$targ" 
		cd /projects/builds/"$targ"
	fi
}

### Cdargs ###

cv () {
	cdargs "$1" && cd "`cat "$HOME/.cdargsresult"`" 
}

### Cdargs add bookmark ###

cap () {
       cdargs --add=":$1:`pwd`" ;
}

### Copy and Follow ###

goto() { [ -d "$1" ] && cd "$1" || cd "$(dirname "$1")"; }

cpf() { cp "$@" && goto "$_"; }

mvf() { mv "$@" && goto "$_"; }

mkdirf() { mkdir "$@" && goto "$_"; }

### Easy extract ###

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1    ;;
      *.tar.gz)    tar xvzf $1    ;;
      *.tar.xz)    tar xvJf $1    ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xvf $1     ;;
      *.tbz2)      tar xvjf $1    ;;
      *.tgz)       tar xvzf $1    ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *.xz)        unxz $1        ;;
      *.exe)       cabextract $1  ;;
      *)           echo "\`$1': unknown file type" ;;
    esac
  else
    echo "\`$1' is an unknown file"
  fi
}

#### Easy grep ###

luk() {
#  cmd      string
    $1 | grep $2
}

#### Easy grep ign case ###

luki() {
    $1 | grep -i $2
}

#### Easy grep invert ###

lukv() {
    $1 | grep -v $2
}

### Easy local db bkup ###

bkpkg () {
	echo
	echo -e "${bldwht}===>${bldgrn} Backing up local database"
	mv /media/three/local_bkup/{old.tar.xz,done.tar.xz} || return 1
	mv /media/three/local_bkup/{local-*,old.tar.xz} || return 1
	tar -cJf /media/three/local_bkup/local-`date +%d%m`.tar.xz /var/lib/pacman/local/ 1>/dev/null 2>&1 || return 1
	rm /media/three/local_bkup/done.tar.xz
	echo
}

### Get AUR tarball ###

getaur() {
    wget -nv http://aur.archlinux.org/packages/$1/$1.tar.gz -P /media/two/Downloads
    tar -xvf /media/two/Downloads/$1.tar.gz -C /projects/builds
    cd /projects/builds/$1
}

### Get AUR tarball+install ###

getauri() {
    wget -nv http://aur.archlinux.org/packages/$1/$1.tar.gz -P /media/two/Downloads
    tar -xvf /media/two/Downloads/$1.tar.gz -C /projects/builds
    cd /projects/builds/$1
    makepkg -i
}

### Get AUR tarball+make ###

getaurm() {
    wget -nv http://aur.archlinux.org/packages/$1/$1.tar.gz -P /media/two/Downloads
    tar -xvf /media/two/Downloads/$1.tar.gz -C /projects/builds
    cd /projects/builds/$1
    makepkg
}

### Unpack AUR tarball###

unpaur() {
    tar -xvf /media/two/Downloads/$1.tar.gz -C /projects/builds
    cd /projects/builds/$1
}

### Unpack AUR tarball+install ###

unpauri() {
    tar -xvf /media/two/Downloads/$1.tar.gz -C /projects/builds
    cd /projects/builds/$1
    makepkg -i
}

### Unpack AUR tarball+make ###

unpaurm() {
    tar -xvf /media/two/Downloads/$1.tar.gz -C /projects/builds
    cd /projects/builds/$1
    makepkg
}

### mkmv ###
### Usage: mkmv <file> <directory>

mkmv() {
    mkdir "$2"
    mv "$1" "$2"
}

#### New pkgbuild ###

newbld() {

	pkgname=""
	pkgver=""
	pkgrel=""
	pkgdesc=""

	echo "Enter pkgname: "
	read pkgname
	echo "Enter pkgver: "
	read pkgver
	echo "Enter pkgrel: "
	read pkgrel
	echo "Enter pkgdesc: "
	read pkgdesc
	
	mkdir /projects/builds/$pkgname
	cd /projects/builds/$pkgname

	cp /projects/pacman_protos/sas/PKGBUILD .
	sed -i -e "s|wpkgname|$pkgname|g" \
		-e "s|wpkgver|$pkgver|g" \
		-e "s|wpkgrel|$pkgrel|g" \
		-e "s|wpkgdesc|\'$pkgdesc'|g" PKGBUILD

	echo "Done"
}

### Pacside ###

pacside() {

    sidesch() {

        bldblu='\e[1;34m' # Blue
        bldgrn='\e[1;32m' # Blue
        bldwht='\e[1;37m' # White
        bldred='\e[1;31m' # White
        txtrst='\e[0m'    # Text Reset
        
        pkg=()
        desc=()
        count=-1
        WIDTH=${WIDTH:-70}

        while read line; do
            if [[ $line =~ ^(testing|core|extra|community|community-testing|local)/* ]]; then
                (( count++ ))
                line1="$(echo $line |cut -d " " -f2 )"
                line2="$(echo $line |cut -d " " -f1 )"
#                line3="$(echo $line |cut -d " " -f3,4 )"
				line=$(echo -e $line2 $bldgrn $line1 $txtrst) 
                pkg[count]="$line"
              continue
            fi

            desc[count]+="$line"
        done

        i=0
        while (( i <= count )); do
            IFS=$'\n' read -r -d'\0' -a blockdesc < <(fmt -w$WIDTH <<< "${desc[i]}")

            paste -d' ' <(printf "${bldblu}\t%-71s" "${pkg[i]}") <(echo -e "${bldwht}${blockdesc[0]}${txtrst}")
    
            for line in "${blockdesc[@]:1}"; do
            printf "${bldwht}\t%-61s%s\n" "" "$line"
            done
    
        (( ++i ))
        [[ $1 != -s ]] && echo
        done
        }

	echo
    [[ -z $2 ]] && pacman -Ss $1 | sidesch
    [[ $1 == -s ]] && pacman -Ss $2 | sidesch -s
    [[ $1 == -q ]] && pacman -Qs $2 | sidesch
    [ $1 == -sq -o $1 == -qs ] && pacman -Qs $2 | sidesch -s
}

### ~/prjts/pkgs ###

hspp  () {
	hsp='/projects/packages/'
	echo $hsp
}

### ~/prjts/blds###

blds  () {
	cd /projects/builds/$1
}

### ~/prjts/blds###

bds  () {
	bds1='/projects/builds/$[1]'
	echo bds1
}

### Quick edit ###

edit() {
	ED_CLI="vim"
	ED_GUI="gvim"
	ED_VIM="gvim"

	if [ -z ${2} ]; then
		EDITOR2=${ED_CLI} && FILE=${1} && SUCMD="sudo"
	else
		case ${1} in
			'-g') EDITOR2=${ED_GUI} && FILE=${2} && SUCMD="sudo" 
			;;
			'-v') EDITOR2=${ED_VIM} && FILE=${2} && SUCMD="sudo" 
			;;
			*) echo "Unknown option '${1}'" 
			;;
		esac
	fi

	case ${FILE} in
		'fstab')	${SUCMD} ${EDITOR2} /etc/fstab  ;;
		'pacman')	${SUCMD} ${EDITOR2} /etc/pacman.conf  ;;
		'xorg')		${SUCMD} ${EDITOR2} /etc/X11/xorg.conf ;;
		'grub')		${SUCMD} ${EDITOR2} /boot/grub/grub.cfg ;;
		'inittab')	${SUCMD} ${EDITOR2} /etc/inittab ;;
		'rc.conf')	${SUCMD} ${EDITOR2} /etc/rc.conf ;;
		'bashrc')	${EDITOR2} /home/sas/.bashrc ;;
		'conky')	${SUCMD} ${EDITOR2} /etc/conky/conky.conf ;;
		'uploads')	${EDITOR2} /home/sas/.weathconkrc ;;
		'myfunc')	${SUCMD} ${EDITOR2} /usr/lib/sas/my_func ;;
		'rootbash')	${SUCMD} ${EDITOR2} /root/.bash_profile ;;
		'pkgb')		${EDITOR2} PKGBUILD ;;
		*)		${SUCMD} ${EDITOR2} $FILE ;;
	esac
}

### Ranger exit to dir ###

ranger() {
	command ranger --fail-unless-cd $@ &&
	cd "$(grep \^\' ~/.ranger/bookmarks | cut -b3-)"
       }

### vim quick open session ###

vims() {
	vim -S ~/.vim/sessions/$@
}

### gvim quick open session ###

gvims() {
	gvim -S ~/.vim/sessions/$@
}


