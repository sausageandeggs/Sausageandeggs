#!/bin/bash
###################################################
###### My bash functions, sourced by .bashrc ######
###################################################
## Ver 182 ##

### clr_mem ###

clr_mem () {
  #pagecache, dentries and inodes
  # 1   2   3
    echo $1 > /proc/sys/vm/drop_caches
}

### cowerd ###

cowerd() {
  local cowercmd="cower --nossl -f -d -t "
  local blddir="/projects/builds/"

  if [[ -z ${2} ]]; then
    local targ="${1}"
  else
    local targ="${2}"
    case ${1} in
      -m)
        local makecmd="makepkg"
      ;;
      -i)
        local makecmd="makepkg -i --noconfirm"
      ;;
      -o)
        local makecmd="makepkg -o --noconfirm"
      ;;
    esac
  fi

  ${cowercmd} ${blddir} ${targ}
  cd ${blddir}/${targ}
  ${makecmd}
}

### Cdargs ###

cv () {
  cdargs "$1" && cd "`cat "$HOME/.cdargsresult"`" 
}

### Cdargs add bookmark ###

cap () {
       cdargs --add=":$1:`pwd`" ;
}

### Ctuts quick open all ###

ctuts(){
    cd /projects/my-pjts/c-tuts
    gvim -S /projects/my-pjts/c-tuts/vim-sessions/ctuts.vim-session &
    evince /media/three/PDFs/Misc-Bash-C,-C++-Perl/C/ForDummies-C.pdf &
}

### Copy and Follow ###

goto() { [ -d "$1" ] && cd "$1" || cd "$(dirname "$1")"; }

cpf() { cp "$@" && goto "$_"; }

mvf() { mv "$@" && goto "$_"; }

mkdirf() { mkdir "$@" && goto "$_"; }

### Easy extract ###

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1    ;;
      *.tar.gz)    tar xvzf $1    ;;
      *.tar.xz)    tar xvJf $1    ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xvf $1     ;;
      *.tbz2)      tar xvjf $1    ;;
      *.tgz)       tar xvzf $1    ;;
      *.zip)       unzip $1       ;;
      *.lrz)       lrzuntar $1    ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *.xz)        unxz $1        ;;
      *.exe)       cabextract $1  ;;
      *)           echo "\`$1': unknown file type" ;;
    esac
  else
    echo "\`$1' is an unknown file"
  fi
}

#### Easy grep ###

luk() {
#  cmd      string
    $1 | grep $2
}

#### Easy grep ign case ###

luki() {
    $1 | grep -i $2
}

#### Easy grep invert ###

lukv() {
    $1 | grep -v $2
}

### Easy local db bkup ###

bkpkg () {
  echo
  echo -e "${bldwht}===>${bldgrn} Backing up local database"
  mv /media/three/local_bkup/{old.tar.xz,done.tar.xz} || return 1
  mv /media/three/local_bkup/{local-*,old.tar.xz} || return 1
  tar -cJf /media/three/local_bkup/local-`date +%d%m`.tar.xz /var/lib/pacman/local/ 1>/dev/null 2>&1 || return 1
  rm /media/three/local_bkup/done.tar.xz
  echo
}

### mkmv ###
### Usage: mkmv <file> <directory>

mkmv() {
    mkdir "$2"
    mv "$1" "$2"
}

#### New pkgbuild ###

newbld() {

  pkgname=""
  pkgver=""
  pkgrel=""
  pkgdesc=""

  echo "Enter pkgname: "
  read pkgname
  echo "Enter pkgver: "
  read pkgver
  echo "Enter pkgrel: "
  read pkgrel
  echo "Enter pkgdesc: "
  read pkgdesc
  
  mkdir /projects/builds/$pkgname
  cd /projects/builds/$pkgname

  cp /projects/pacman_protos/sas/PKGBUILD .
  sed -i -e "s|wpkgname|$pkgname|g" \
    -e "s|wpkgver|$pkgver|g" \
    -e "s|wpkgrel|$pkgrel|g" \
    -e "s|wpkgdesc|\'$pkgdesc'|g" PKGBUILD

  echo "Done"
}
### ~/prjts/pkgs ###

hspp  () {
  hsp='/projects/packages/'
  echo $hsp
}

### ~/prjts/blds###

blds  () {
  cd /projects/builds/$1
}

### pppp (download with powerpill(-light) & install with [acman-color) ###

pppp() {
  sudo /usr/bin/powerpill $@
  sudo /usr/bin/pacman-color -S $@
}

## Quick edit ###

edit() {
  ED_CLI="vim"
  ED_GUI="gvim"
  ED_ALT="gedit"

  if [ -z ${2} ]; then
    EDITOR2=${ED_CLI} && FILE=${1} && SUCMD="sudo"
  else
    case ${1} in
      '-g') EDITOR2=${ED_GUI} && FILE=${2} && SUCMD="sudo" 
      ;;
      '-a') EDITOR2=${ED_ALT} && FILE=${2} && SUCMD="sudo" 
      ;;
      *) echo "Unknown option '${1}'" 
      ;;
    esac
  fi

  case ${FILE} in
    'bash')   ${EDITOR2} $HOME/.bashrc ;;
    'burg')   ${SUCMD} ${EDITOR2} /boot/burg/burg.cfg ;;
    'conky')  ${SUCMD} ${EDITOR2} /etc/conky/conky.conf ;;
    'fstab')  ${SUCMD} ${EDITOR2} /etc/fstab  ;;
    'func')   ${SUCMD} ${EDITOR2} /usr/lib/sas/my_func ;;
    'grub')   ${SUCMD} ${EDITOR2} /boot/grub/grub.cfg ;;
    'gvim')   ${EDITOR2} $HOME/.gvimrc ;;
    'inittab')  ${SUCMD} ${EDITOR2} /etc/inittab ;;
    'makepkg')  ${SUCMD} ${EDITOR2} /etc/makepkg.conf  ;;
    'pacman')   ${SUCMD} ${EDITOR2} /etc/pacman.conf  ;;
    'rcc')  ${SUCMD} ${EDITOR2} /etc/rc.conf ;;
    'rootbash') ${SUCMD} ${EDITOR2} /root/.bash_profile ;;
    'vim')  ${EDITOR2} $HOME/.vimrc ;;
    'xorg')  ${SUCMD} ${EDITOR2} /etc/X11/xorg.conf ;;
    *)  ${SUCMD} ${EDITOR2} $FILE ;;
  esac
}

### Ranger exit to dir ###

ranger-cd(){
  ranger --choosedir=/tmp/chosen
  if [ -f /tmp/chosen -a "$(cat /tmp/chosen)" != "$(pwd | tr -d "\n")" ]; then
    cd "$(cat /tmp/chosen)"
  fi
  rm -f /tmp/chosen
}

### Stump (Auto update AUR pkgd) ###

stump() {
local buildDir="/projects/builds"
local updt=($(cower -u --nossl | awk '{print $2}'))
local updts=(${updt[@]/kernel26-*/})

cower -d -f -u --ignore=kernel26-ck,kernel26-pf --nossl 

local co=0
for i in ${updts[*]} ; do
  echo -e "\n\t ${bldgrn}Updating ${updts[co]} \n"
  cd $buildDir/${updts[co]} && makepkg -i --noconfirm
  (( ++co ))
done
cd -
}

### Stumpy (update list of AUR pkgs) ###

stumpy() {
local updates=($@)
local co=0

for i in ${updates[*]} ; do
  echo -e "\n\t ${bldgrn}Updating ${updates[co]}${txtrst} \n"
  cowerd -i ${updates[co]}
  (( ++co ))
  cd -
done
}

### vim quick open session ###

vims() {
  vim -S ~/.vim/sessions/$@
}

### gvim quick open session ###

gvims() {
  gvim -S ~/.vim/sessions/$@
}


